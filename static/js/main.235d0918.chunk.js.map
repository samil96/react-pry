{"version":3,"sources":["components/title.js","components/layout.js","components/task.js","components/task-list.js","components/input.js","App.js","serviceWorker.js","index.js"],"names":["title","react_default","a","createElement","className","aria-label","role","Layout","props","children","Task","value","onClick","handleDelete","id","TaskList","react","tasks","map","task","components_task","key","Input","onSubmit","handleSubmit","onChange","handleTaskChange","type","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","event","setState","newTask","target","preventDefault","newTasks","state","push","splice","layout","components_title","input","task_list","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+NAWeA,MAVf,WACE,OACCC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAd,4BAC8B,IAC1BH,EAAAC,EAAAC,cAAA,QAAME,aAAW,QAAQC,KAAK,OAA9B,kBCGQC,MAPf,SAAgBC,GACd,OACAP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACZI,EAAMC,WCSIC,MAXf,SAAcF,GACZ,OACEP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QAAQI,EAAMG,OAC5BV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,UAAQS,QAAS,WAAOJ,EAAMK,aAAaL,EAAMM,KAAMV,UAAU,iBAAjE,QCQOW,MAbf,SAAkBP,GAChB,OACAP,EAAAC,EAAAC,cAACa,EAAA,SAAD,KACGR,EAAMS,MAAMC,IAAI,SAACC,EAAML,GAAP,OACfb,EAAAC,EAAAC,cAACiB,EAAD,CACEC,IAAKP,EACLD,aAAcL,EAAMK,aACpBF,MAAOQ,QCIAG,MAZf,SAAed,GACb,OACEP,EAAAC,EAAAC,cAAA,QAAMoB,SAAUf,EAAMgB,cACpBvB,EAAAC,EAAAC,cAAA,SACEQ,MAAOH,EAAMG,MACbc,SAAUjB,EAAMkB,iBAChBC,KAAK,OACLvB,UAAU,eCuEHwB,cAlEb,SAAAA,EAAYpB,GAAO,IAAAqB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMxB,KAORkB,iBAAmB,SAACU,GAClBP,EAAKQ,SAAS,CACZC,QAASF,EAAMG,OAAO5B,SAVPkB,EAoBnBL,aAAe,SAACY,GACdA,EAAMI,iBACN,IAAIC,EAAWZ,EAAKa,MAAMzB,MAC1BwB,EAASE,KAAKd,EAAKa,MAAMJ,SACzBT,EAAKQ,SAAS,CACZC,QAAS,GACTrB,MAAOwB,KA1BQZ,EA8BnBhB,aAAe,SAACC,GACd,IAAI2B,EAAWZ,EAAKa,MAAMzB,MAC1BwB,EAASG,OAAO9B,EAAI,GACpBe,EAAKQ,SAAS,CACZpB,MAAOwB,KAhCTZ,EAAKa,MAAQ,CACXJ,QAAS,GACTrB,MAAO,IAJQY,wEAgDjB,OACE5B,EAAAC,EAAAC,cAAC0C,EAAD,KACE5C,EAAAC,EAAAC,cAAC2C,EAAD,MACA7C,EAAAC,EAAAC,cAAC4C,EAAD,CACEvB,aAAcQ,KAAKR,aACnBE,iBAAkBM,KAAKN,iBACvBf,MAAOqB,KAAKU,MAAMJ,UAEpBrC,EAAAC,EAAAC,cAAC6C,EAAD,CACE/B,MAAOe,KAAKU,MAAMzB,MAClBJ,aAAcmB,KAAKnB,uBA3DXoC,aCAEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvD,EAAAC,EAAAC,cAACsD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.235d0918.chunk.js","sourcesContent":["import React from \"react\";\r\nfunction title() {\r\n  return (\r\n   <h1 className=\"title\">\r\n       Lesly, eres super genial {\" \"}\r\n       <span aria-label=\"emoji\" role=\"img\">\r\n       😍\r\n       </span>\r\n   </h1>\r\n  );\r\n}\r\nexport default title;","import React from 'react';\r\nfunction Layout(props){\r\n  return(\r\n  <div className=\"container\">\r\n    {props.children}\r\n  </div>\r\n  )\r\n}\r\nexport default Layout;","import React from 'react';\r\n\r\nfunction Task(props) {\r\n  return (\r\n    <div className=\"task-container\">\r\n      <h3 className=\"task\">{props.value}</h3>\r\n      <div className=\"button-container\">\r\n        <button onClick={() => {props.handleDelete(props.id)}} className=\"delete-button\">X</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Task;","import React, { Fragment } from 'react';\r\nimport Task from './task'\r\nfunction TaskList(props){\r\n  return(\r\n  <Fragment>\r\n    {props.tasks.map((task, id) =>\r\n      <Task \r\n        key={id}\r\n        handleDelete={props.handleDelete}\r\n        value={task}\r\n      />\r\n    )}\r\n  </Fragment>\r\n )\r\n}\r\nexport default TaskList;","import React from \"react\";\r\nfunction Input(props) {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <input\r\n        value={props.value}\r\n        onChange={props.handleTaskChange}\r\n        type=\"text\"\r\n        className=\"new-task\"\r\n      />\r\n    </form>\r\n  );\r\n}\r\nexport default Input","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Title from './components/title';\r\nimport Layaout from './components/layout';\r\nimport TaskList from './components/task-list';\r\nimport Input from './components/input';\r\n\r\n/*\r\nVariables:\r\ntasks: contener la lista de tareas\r\n*/\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      newTask: \"\",\r\n      tasks: []\r\n    }\r\n  }\r\n\r\n  handleTaskChange = (event) => {\r\n    this.setState({\r\n      newTask: event.target.value,\r\n    })\r\n  }\r\n\r\n  /*Funcion para evitar que se recargue la pagina con preventDefault y asi también evitar que se\r\n  publique dos veces. Otra función de handleSubmit es para \r\n  almacenar los datos del input en nuestro arreglo de tareas en el estado.\r\n  Esta función guarda una copia de las tareas actuales en newTasks y luego desplazar que el \r\n  contenido escrito del input en el arreglo (tasks) \r\n  */\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    let newTasks = this.state.tasks;\r\n    newTasks.push(this.state.newTask)\r\n    this.setState({\r\n      newTask: \"\",\r\n      tasks: newTasks\r\n    })\r\n  }\r\n\r\n  handleDelete = (id) => {\r\n    let newTasks = this.state.tasks;\r\n    newTasks.splice(id, 1)\r\n    this.setState({\r\n      tasks: newTasks,\r\n    })\r\n  }\r\n\r\n/* con el evento onchange se agrega un nuevos elementos al tasks, por medio de submit del input\r\nonsubmit hara enter para agregar nuevo elemento, esto se hace con la función handleSubmit\r\n*/\r\n\r\n/*\r\nLa función map genera un nuevo componente con su contenido, que recibe como parametro una\r\nfunción que se ejecutar cada elemento del arreglo\r\n\r\n*/\r\n  render() {\r\n    return (\r\n      <Layaout>\r\n        <Title/>\r\n        <Input\r\n          handleSubmit={this.handleSubmit}\r\n          handleTaskChange={this.handleTaskChange}\r\n          value={this.state.newTask}\r\n        />\r\n        <TaskList \r\n          tasks={this.state.tasks}\r\n          handleDelete={this.handleDelete}\r\n        />\r\n      </Layaout>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}